package com.lms.hexa.controller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.lms.hexa.command.Criteria;
import com.lms.hexa.command.CriteriaCommand;
import com.lms.hexa.dto.AttachVO;
import com.lms.hexa.dto.MenuVO;
import com.lms.hexa.dto.PdsVO;
import com.lms.hexa.service.MenuService;
import com.lms.hexa.service.PdsService;


@Controller
public class CommonController {
	
	@Autowired
	private PdsService pdsService;
	
	@Autowired
	private MenuService menuService;
	
	@RequestMapping("/member/index")
	public ModelAndView memberIndex(ModelAndView mnv) throws Exception {
		String url = "common/memberIndexPage";
		
		List<MenuVO> menuList = menuService.getMemberMenuList();			
		mnv.addObject("menuList", menuList);
		
		List<MenuVO> submenuList = menuService.getMemberSubMenuList();		
		mnv.addObject("submenuList", submenuList);
		mnv.setViewName(url);
		return mnv;
	}
	
	@RequestMapping("/manager/index")
	public ModelAndView managerIndex(ModelAndView mnv) throws Exception {
		String url = "common/managerIndexPage";
		
		List<MenuVO> menuList = menuService.getManagerMenuList();
		mnv.addObject("menuList", menuList);
		
		List<MenuVO> submenuList = menuService.getManagerSubMenuList();		
		mnv.addObject("submenuList", submenuList);
		mnv.setViewName(url);
		
		return mnv;
	}
	
	@RequestMapping("/member/main")
	public String memberMain() {
		String url="member_home";
		return url;
	}
	
	@RequestMapping("/member/consultation/consultationRequest")
	public String consultationRequest() {
		String url="/member/consultation/consultationRequest";
		return url;
	}
	
	@RequestMapping("/member/consultation/consultationHistory")
	public String consultationHistory() {
		String url="/member/consultation/consultationHistory";
		return url;
	}
	
	@RequestMapping("/manager/main")
	public String managerMain() {
		String url="manager_home";
		return url;
	}

	@RequestMapping("/common/loginTimeOut")
	public String loginTimeOut(Model model)throws Exception {
		
		String url="security/sessionOut";
		
		model.addAttribute("message","세션이 만료되었습니다.\\n다시 로그인 하세요!");
		return url;
	}
	
	@RequestMapping(value = "/common/loginForm", method = RequestMethod.GET)
	public String loginForm(@RequestParam(defaultValue="")String error,
			HttpServletResponse response) {
		String url ="common/loginForm";
		
		if(error.equals("1")) {
			response.setStatus(302);
		}
		
		return url;
	}
	
	@RequestMapping("/common/noteForm")
	public String noteForm() {
		String url = "common/noteForm";
		return url;
	}
	
	@RequestMapping("/common/noteDetail")
	public String noteDetail() {
		String url = "common/noteDetail";
		return url;
	}
	
	@RequestMapping("/common/noteRegist")
	public String noteRegist() {
		String url= "common/noteRegist";
		return url;
	}
	
	@RequestMapping("/common/pdsForm")
	public ModelAndView pdsForm(CriteriaCommand cricmd, ModelAndView mnv) throws Exception{
		String url = "common/pdsForm";
		
		Criteria cri = cricmd.toCriteria();
		
		Map<String, Object> dataMap = pdsService.getList(cri);
		
		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		
		return mnv;
	}
	
	@RequestMapping("/common/pdsDetail")
	public ModelAndView pdsDetail(int pdsId, String from, ModelAndView mnv) throws Exception {
		String url = "common/pdsDetail";
		
		PdsVO pds = null;
		if(from !=null && from.equals("list")) {
			pds = pdsService.read(pdsId);
			url = "redirect:/common/pdsDetail.do?pdsId=" + pdsId;
		} else {
			pds = pdsService.getPds(pdsId);
		}
		
		// 파일명 재정의
		if(pds != null) {
			List<AttachVO> attachList = pds.getAttachList();
			if(attachList != null) {
				for (AttachVO attach : attachList) {
					String fileName = attach.getAttachName().split("\\$\\$")[1];
					attach.setAttachName(fileName);
				}
			}
		}
		
		mnv.addObject("pds", pds);
		mnv.setViewName(url);
		
		return mnv;
	}
	
	@RequestMapping("/common/getFile")
	public String getFile(int attachId, Model model) throws Exception {
		
		String url = "downloadFile";
		
		AttachVO attach = pdsService.getAttachByAttachId(attachId);
		
		model.addAttribute("attachPath", attach.getAttachPath());
		model.addAttribute("attachName", attach.getAttachName());
		
		return url;
	}
	
}

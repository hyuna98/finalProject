<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Student-Mapper">
	
	<resultMap type="student" id="studentMap">
		<result property="id" column="student_id"/>
		<result property="pw" column="student_pw"/>
		<result property="name" column="STUDENT_NAME"/>
		<result property="genderCode" column="STUDENT_GENDER_CODE"/>
		<result property="email" column="STUDENT_EMAIL"/>
		<result property="zipCode" column="STUDENT_ZIP_CODE"/>
		<result property="address" column="STUDENT_ADDRESS"/>
		<result property="address2" column="STUDENT_ADDRESS2"/>
		<result property="studentPicture" column="STUDENT_STUDENT_PICTURE"/>
		<result property="birthDate" column="STUDENT_BIRTH_DATE"/>
		<result property="discountReason" column="STUDENT_DISCOUNT_REASON"/>
		<result property="discountRate" column="STUDENT_DISCOUNT_RATE"/>
		<result property="payDueDate" column="STUDENT_PAY_DUE_DATE"/>
		<result property="academyRegDate" column="STUDENT_ACADEMY_REG_DATE"/>
		<result property="stateCode" column="STUDENT_STATE_CODE"/>
		<result property="sibling" column="STUDENT_SIBLING"/>
		<result property="gradeCategoryCode" column="STUDENT_GRADE_CATEGORY_CODE"/>
		<result property="grade" column="STUDENT_GRADE"/>
		<result property="hp" column="STUDENT_HP"/>
		<result property="parentId" column="PARENT_ID"/>
		<result property="schoolNo" column="SCHOOL_NO"/>
	</resultMap>
	
	<select id="selectStudentById" parameterType="str" resultType="student">
		select
		a.STUDENT_ID as id,
		a.STUDENT_PW as pw,
		a.STUDENT_NAME as name,
		a.STUDENT_GENDER_CODE as genderCode,
		a.STUDENT_EMAIL as email,
		a.STUDENT_ZIP_CODE as zipCode,
		a.STUDENT_ADDRESS as address,
		a.STUDENT_ADDRESS2 as address2,
		a.STUDENT_STUDENT_PICTURE as studentPicture,
		a.STUDENT_BIRTH_DATE as birthDate,
		a.STUDENT_DISCOUNT_REASON as discountReason,
		a.STUDENT_DISCOUNT_RATE as discountRate,
		a.STUDENT_PAY_DUE_DATE as payDueDate,
		a.STUDENT_ACADEMY_REG_DATE as academyRegDate,
		a.STUDENT_STATE_CODE as stateCode,
		a.STUDENT_SIBLING as sibling,
		a.STUDENT_GRADE_CATEGORY_CODE as gradeCategoryCode,
		a.STUDENT_GRADE as grade,
		a.STUDENT_HP as hp,
		a.PARENT_ID as parentId,
		b.SCHOOL_NAME as schoolName,
		a.SCHOOL_NO as schoolNo
		
		from student a,
			 school b
		
		where a.student_id=#{id}
		and a.school_no = b.school_id
	</select>
	
	<select id="selectStudentList" parameterType="str" resultMap="studentMap">
		select a.STUDENT_NAME 
				, b.SCODE_VALUE as STUDENT_GENDER_CODE
				, a.STUDENT_ID
				, c.SCHOOL_NAME as SCHOOL_NO
				, e.SCODE_VALUE as STUDENT_GRADE_CATEGORY_CODE
				, f.SCODE_VALUE as STUDENT_GRADE
				, a.STUDENT_HP
				, d.PARENT_NAME as PARENT_ID
				, a.STUDENT_ACADEMY_REG_DATE
				, g.SCODE_VALUE as STUDENT_STATE_CODE
				, i.class_name as STUDENT_SIBLING
		from student a, STANDARDCODE b, SCHOOL c, PARENT d, STANDARDCODE e, STANDARDCODE f, STANDARDCODE g, belong h, class i
		where a.student_id is not null
		    and a.STUDENT_GENDER_CODE = b.SCODE_KEY
		    and b.SCODE_CATEGORY = 'STUDENT_GENDER_CODE'
		    and a.STUDENT_GRADE_CATEGORY_CODE = e.SCODE_KEY
		    and a.STUDENT_GRADE = f.SCODE_KEY
		    and a.STUDENT_STATE_CODE = g.SCODE_KEY
		    and a.SCHOOL_NO = c.SCHOOL_ID
		    and a.PARENT_ID = d.PARENT_ID
		    and a.STUDENT_ID = h.STUDENT_ID
            and h.class_id = i.class_id
			<if test="keyword != null">
				and (<![CDATA[ b.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ a.STUDENT_NAME ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ a.student_id ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ c.SCHOOL_NAME ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ e.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ f.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or STUDENT_HP like '%'||#{keyword}||'%'
					or <![CDATA[ d.PARENT_NAME ]]> like '%'||#{keyword}||'%'
					or STUDENT_ACADEMY_REG_DATE like '%'||#{keyword}||'%'
					or <![CDATA[ g.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ i.class_name ]]> like '%'||#{keyword}||'%')
			</if>
			order by a.STUDENT_NAME
	</select>
	
	<select id="selectStudentListCount" resultType="int">
		select count(*)
		from (select a.STUDENT_NAME 
				, b.SCODE_VALUE as STUDENT_GENDER_CODE
				, a.STUDENT_ID
				, c.SCHOOL_NAME as SCHOOL_NO
				, e.SCODE_VALUE as STUDENT_GRADE_CATEGORY_CODE
				, f.SCODE_VALUE as STUDENT_GRADE
				, a.STUDENT_HP
				, d.PARENT_NAME as PARENT_ID
				, a.STUDENT_ACADEMY_REG_DATE
				, g.SCODE_VALUE as STUDENT_STATE_CODE
				, i.class_name as STUDENT_SIBLING
		from student a, STANDARDCODE b, SCHOOL c, PARENT d, STANDARDCODE e, STANDARDCODE f, STANDARDCODE g, belong h, class i
		where a.student_id is not null
		    and a.STUDENT_GENDER_CODE = b.SCODE_KEY
		    and b.SCODE_CATEGORY = 'STUDENT_GENDER_CODE'
		    and a.STUDENT_GRADE_CATEGORY_CODE = e.SCODE_KEY
		    and a.STUDENT_GRADE = f.SCODE_KEY
		    and a.STUDENT_STATE_CODE = g.SCODE_KEY
		    and a.SCHOOL_NO = c.SCHOOL_ID
		    and a.PARENT_ID = d.PARENT_ID
		    and a.STUDENT_ID = h.STUDENT_ID
            and h.class_id = i.class_id
			<if test="keyword != null">
				and (<![CDATA[ b.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ a.STUDENT_NAME ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ a.student_id ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ c.SCHOOL_NAME ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ e.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ f.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or STUDENT_HP like '%'||#{keyword}||'%'
					or <![CDATA[ d.PARENT_NAME ]]> like '%'||#{keyword}||'%'
					or STUDENT_ACADEMY_REG_DATE like '%'||#{keyword}||'%'
					or <![CDATA[ g.SCODE_VALUE ]]> like '%'||#{keyword}||'%'
					or <![CDATA[ i.class_name ]]> like '%'||#{keyword}||'%')
			</if>
			)
	</select>

	<update id="insertStudent" parameterType="student">
		MERGE INTO student
		USING dual
		ON (student_id = #{id})
 		WHEN MATCHED THEN
      		UPDATE SET STUDENT_NAME = #{name},
      				   STUDENT_GENDER_CODE = #{genderCode}, 
      				   STUDENT_EMAIL = #{email}, 
      				   STUDENT_ZIP_CODE = #{zipCode}, 
      				   STUDENT_ADDRESS = #{address}, 
      				   STUDENT_ADDRESS2 = #{address2}, 
      				   STUDENT_BIRTH_DATE =#{birthDate},
        			   STUDENT_DISCOUNT_REASON = #{discountReason},
        			   STUDENT_DISCOUNT_RATE = #{discountRate}, 
        			   STUDENT_PAY_DUE_DATE = #{payDueDate}, 
        			   STUDENT_ACADEMY_REG_DATE = #{academyRegDate}, 
        			   STUDENT_STATE_CODE = #{stateCode}, 
        			   STUDENT_SIBLING = #{sibling},
        			   STUDENT_GRADE_CATEGORY_CODE = #{gradeCategoryCode}, 
        			   STUDENT_GRADE = #{grade}, 
        			   STUDENT_HP = #{hp}, 
        			   PARENT_ID = #{parentId}, 
        			   SCHOOL_NO = #{schoolNo}, 
        			   STUDENT_STUDENT_PICTURE = #{studentPicture}     
 		WHEN NOT MATCHED THEN
      		INSERT 
      		(student_id, student_pw, STUDENT_NAME, STUDENT_GENDER_CODE, STUDENT_EMAIL, STUDENT_ZIP_CODE, STUDENT_ADDRESS, STUDENT_ADDRESS2, STUDENT_BIRTH_DATE, 
			STUDENT_DISCOUNT_REASON, STUDENT_DISCOUNT_RATE, STUDENT_PAY_DUE_DATE, STUDENT_ACADEMY_REG_DATE, STUDENT_STATE_CODE, STUDENT_SIBLING, STUDENT_GRADE_CATEGORY_CODE, STUDENT_GRADE, STUDENT_HP, PARENT_ID, SCHOOL_NO, STUDENT_STUDENT_PICTURE)
			
			VALUES (#{id},#{pw},#{name},#{genderCode},#{email},#{zipCode},#{address},#{address2},#{birthDate},
			#{discountReason},#{discountRate},#{payDueDate},#{academyRegDate},#{stateCode},#{sibling},#{gradeCategoryCode},#{grade},#{hp},#{parentId},#{schoolNo},#{studentPicture})
	</update>
	
	<select id="selectStudentIdList" resultType="student" resultMap="studentMap">
		select
		STUDENT_ID
		from student
		order by STUDENT_ACADEMY_REG_DATE desc
	</select>
	
	<update id="updatePwd" parameterType="str">
		UPDATE STUDENT
		SET STUDENT_PW = #{emailAddress}
			WHERE STUDENT_ID = #{emailAddress}
	</update>

	<update id="modifyPwd" parameterType="student">
		UPDATE STUDENT
		SET STUDENT_PW = #{pw}
			WHERE STUDENT_ID = #{id}
	</update>
	
	<select id="selectStudentClassInfoList" resultType="student">
		select C.student_id as id,
			   B.class_name as className,
		       C.student_name as name,
		       C.student_id as id,
		       D.mng_name as mngName,
		       C.STUDENT_GRADE_CATEGORY_CODE || ' ' || C.STUDENT_GRADE as grade
		  from belong A, class B, student C, manager D
		 where A.class_id = B.class_id
		   and A.student_id = C.student_id
		   and B.mng_id = D.mng_id
	</select>
	
	<select id="searchStudentList" parameterType="str" resultType="student">
		SELECT         B.CLASS_NAME AS CLASSNAME,
		       C.STUDENT_NAME AS NAME,
		       D.MNG_NAME AS MNGNAME,
		       C.STUDENT_GRADE_CATEGORY_CODE || ' ' || C.STUDENT_GRADE AS GRADE
		  FROM BELONG A, CLASS B, STUDENT C, MANAGER D
		 WHERE A.CLASS_ID = B.CLASS_ID
		   AND A.STUDENT_ID = C.STUDENT_ID
		   AND B.MNG_ID = D.MNG_ID
		    <if test="value != null and !value.equals('')">
		   AND (
                  B.CLASS_NAME LIKE '%'|| #{value} ||'%'
            OR C.STUDENT_NAME LIKE '%'|| #{value} ||'%'
            OR D.MNG_NAME LIKE '%'|| #{value} ||'%'
               )
           </if>
	</select>
	
	<select id="selectGenderCodeList" resultType="student">
		select SCODE_KEY as sCodeKey,
			   SCODE_VALUE as sCodeValue
		  from STANDARDCODE
		  where SCODE_CATEGORY = 'STUDENT_GENDER_CODE' 
	</select>
	
	<select id="selectGradeCodeList" resultType="student">
		select SCODE_KEY as sCodeKey,
			   SCODE_VALUE as sCodeValue
		  from STANDARDCODE
		  where SCODE_CATEGORY = 'STUDENT_GRADE'
	</select>
	
	<select id="selectGradeCategoryCodeList" resultType="student">
		select SCODE_KEY as sCodeKey,
			   SCODE_VALUE as sCodeValue
		  from STANDARDCODE
		  where SCODE_CATEGORY = 'STUDENT_GRADE_CATEGORY_CODE'
		  order by SCODE_VALUE desc
	</select>
	
	<select id="selectStatusCodeList" resultType="student">
		select SCODE_KEY as sCodeKey,
			   SCODE_VALUE as sCodeValue
		  from STANDARDCODE
		  where SCODE_CATEGORY = 'STUDENT_STATE_CODE'
	</select>

</mapper>

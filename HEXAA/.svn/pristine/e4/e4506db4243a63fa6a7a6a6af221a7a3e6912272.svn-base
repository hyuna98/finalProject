package com.lms.hexa.dao;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;

import com.lms.hexa.command.CriteriaCommand;
import com.lms.hexa.dto.LessonVO;
import com.lms.hexa.dto.StandardCodeVO;
import com.lms.hexa.dto.StudentVO;
import com.lms.hexa.dto.TimeTableVO;

public class LessonDAOImpl implements LessonDAO{

	private SqlSession session;
	
	public void setSession(SqlSession session) {
		this.session = session;
	}
	
	@Override
	public List<String> selectManagerScheduleById(String id) throws SQLException {
		List<String> scheduleList = session.selectList("Lesson-Mapper.selectManagerScheduleById", id);
		return scheduleList;
	}

	@Override
	public List<StandardCodeVO> selectLessonRoomList() throws SQLException {
		List<StandardCodeVO> lessonRoomList = session.selectList("Lesson-Mapper.selectLessonRoomList");
		return lessonRoomList;
	}

	@Override
	public List<StandardCodeVO> selectStudentGradeCategoryCodeList() throws SQLException {
		List<StandardCodeVO> StudentGradeCategoryCodeList = session.selectList("Lesson-Mapper.selectStudentGradeCategoryCodeList");
		return StudentGradeCategoryCodeList;
	}
	
	@Override
	public int selectLessonSeqNext() throws SQLException {
		int lessonId = session.selectOne("Lesson-Mapper.selectLessonSeqNext");
		return lessonId;
	}

	@Override
	public void InsertNewLessonInfo(LessonVO lessonVO) throws SQLException {
		System.out.println(lessonVO);
		System.out.println(lessonVO.toString());
		session.insert("Lesson-Mapper.InsertNewLessonInfo", lessonVO);
	}
	
	@Override
	public int InsertNewLessonTimeValues(LessonVO lessonVO) throws SQLException {
		
		int result = 0;
		
		String lessonTimeInfoStr = lessonVO.getLessonTimeTarget();
		String[] lessonTimeInfoArr = lessonTimeInfoStr.split(",");
		List<TimeTableVO> lessonTimeInfoList = new ArrayList<TimeTableVO>();
		Map<String,Object> lessonTimeMap = new HashMap<String, Object>();
		
		for (String lessonTime : lessonTimeInfoArr) {
			TimeTableVO ttVO = new TimeTableVO();
			ttVO.setTimetableId(lessonTime);
			ttVO.setTimetablePeriod(lessonVO.getLessonId());
			lessonTimeInfoList.add(ttVO);
		}
		
		lessonTimeMap.put("lessonTimeInfoList", lessonTimeInfoList);
		
		session.insert("Lesson-Mapper.InsertNewLessonTimeValues", lessonTimeMap);
		
		return result;
	}

	@Override
	public List<LessonVO> selectLessonSearchList(CriteriaCommand cri) throws SQLException {
		List<LessonVO> lessonList = session.selectList("Lesson-Mapper.selectLessonSearchList",cri);
		return lessonList;
	}

	@Override
	public List<StandardCodeVO> selectLessonStateCodeList() throws SQLException {
		List<StandardCodeVO> lessonStateCodeList = session.selectList("Lesson-Mapper.selectLessonStateCodeList");
		return lessonStateCodeList;
	}

	@Override
	public List<StudentVO> selectIncludeStudentListByLessonID(String lessonId) {
		List<StudentVO> list = session.selectList("Lesson-Mapper.selectIncludeStudentListByLessonID", lessonId);
		return list;
	}

	@Override
	public List<StudentVO> selectNotIncludeStudentListByLessonID(String lessonId) {
		List<StudentVO> list = session.selectList("Lesson-Mapper.selectNotIncludeStudentListByLessonID", lessonId);
		return list;
	}
	
}
